<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Java AOP分析</title>
      <link href="/2020/03/09/Java-AOP%E5%88%86%E6%9E%90/"/>
      <url>/2020/03/09/Java-AOP%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<h4 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h4><ul><li><p>其实, 接触了这么久的 AOP, 我感觉, AOP 给人难以理解的一个关键点是它的概念比较多, 而且坑爹的是, 这些概念经过了中文翻译后, 变得面目全非, 相同的一个术语, 在不同的翻译下, 含义总有着各种莫名其妙的差别. 鉴于此, 我在本章的开头, 着重为为大家介绍一个 Spring AOP 的各项术语的基本含义. 为了术语传达的准确性, 我在接下来的叙述中, 能使用英文术语的地方, 尽量使用英文.</p></li><li><p>什么是 AOP<br>AOP(Aspect-Oriented Programming), 即 面向切面编程 , 它与 OOP( Object-Oriented Programming, 面向对象编程) 相辅相成, 提供了与 OOP 不同的抽象软件结构的视角.在 OOP 中, 我们以类(class)作为我们的基本单元, 而 AOP 中的基本单元是 Aspect(切面)</p></li><li><p>术语<br>Aspect(切面)<br>aspect 由 pointcount 和 advice 组成, 它既包含了横切逻辑的定义, 也包括了连接点的定义. Spring AOP就是负责实施切面的框架, 它将切面所定义的横切逻辑织入到切面所指定的连接点中.AOP的工作重心在于如何将增强织入目标对象的连接点上, 这里包含两个工作:</p></li></ul><p>如何通过 pointcut 和 advice 定位到特定的 joinpoint 上<br>如何在 advice 中编写切面代码.<br>可以简单地认为, 使用 @Aspect 注解的类就是切面.</p><p>advice(增强)<br>由 aspect 添加到特定的 join point(即满足 point cut 规则的 join point) 的一段代码.许多 AOP框架, 包括 Spring AOP, 会将 advice 模拟为一个拦截器(interceptor), 并且在 join point 上维护多个 advice, 进行层层拦截.例如 HTTP 鉴权的实现, 我们可以为每个使用 RequestMapping 标注的方法织入 advice, 当 HTTP 请求到来时, 首先进入到 advice 代码中, 在这里我们可以分析这个 HTTP 请求是否有相应的权限, 如果有, 则执行 Controller, 如果没有, 则抛出异常. 这里的 advice 就扮演着鉴权拦截器的角色了.</p><p>连接点(join point)<br>a point during the execution of a program, such as the execution of a method or the handling of an exception. In Spring AOP, a join point always represents a method execution.</p><p>程序运行中的一些时间点, 例如一个方法的执行, 或者是一个异常的处理.在 Spring AOP 中, join point 总是方法的执行点, 即只有方法连接点.</p><p>切点(point cut)<br>匹配 join point 的谓词(a predicate that matches join points).Advice 是和特定的 point cut 关联的, 并且在 point cut 相匹配的 join point 中执行.在 Spring 中, 所有的方法都可以认为是 joinpoint, 但是我们并不希望在所有的方法上都添加 Advice, 而 pointcut 的作用就是提供一组规则(使用 AspectJ pointcut expression language 来描述) 来匹配joinpoint, 给满足规则的 joinpoint 添加 Advice.</p><p>关于join point 和 point cut 的区别<br>在 Spring AOP 中, 所有的方法执行都是 join point. 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 因此 join point 和 point cut 本质上就是两个不同纬度上的东西.advice 是在 join point 上执行的, 而 point cut 规定了哪些 join point 可以执行哪些 advice</p><p>introduction<br>为一个类型添加额外的方法或字段. Spring AOP 允许我们为 目标对象 引入新的接口(和对应的实现). 例如我们可以使用 introduction 来为一个 bean 实现 IsModified 接口, 并以此来简化 caching 的实现.</p><p>目标对象(Target)<br>织入 advice 的目标对象. 目标对象也被称为 advised object.因为 Spring AOP 使用运行时代理的方式来实现 aspect, 因此 adviced object 总是一个代理对象(proxied object)注意, adviced object 指的不是原来的类, 而是织入 advice 后所产生的代理类.</p><p>AOP proxy<br>一个类被 AOP 织入 advice, 就会产生一个结果类, 它是融合了原类和增强逻辑的代理类.在 Spring AOP 中, 一个 AOP 代理是一个 JDK 动态代理对象或 CGLIB 代理对象.</p><p>织入(Weaving)<br>将 aspect 和其他对象连接起来, 并创建 adviced object 的过程.根据不同的实现技术, AOP织入有三种方式:</p><p>编译器织入, 这要求有特殊的Java编译器.<br>类装载期织入, 这需要有特殊的类装载器.<br>动态代理织入, 在运行期为目标类添加增强(Advice)生成子类的方式.Spring 采用动态代理织入, 而AspectJ采用编译器织入和类装载期织入.</p><ul><li>advice 的类型<br>before advice, 在 join point 前被执行的 advice. 虽然 before advice 是在 join point 前被执行, 但是它并不能够阻止 join point 的执行, 除非发生了异常(即我们在 before advice 代码中, 不能人为地决定是否继续执行 join point 中的代码)<br>after return advice, 在一个 join point 正常返回后执行的 advice<br>after throwing advice, 当一个 join point 抛出异常后执行的 advice<br>after(final) advice, 无论一个 join point 是正常退出还是发生了异常, 都会被执行的 advice.<br>around advice, 在 join point 前和 joint point 退出后都执行的 advice. 这个是最常用的 advice.</li><li>关于 AOP Proxy<br>Spring AOP 默认使用标准的 JDK 动态代理(dynamic proxy)技术来实现 AOP 代理, 通过它, 我们可以为任意的接口实现代理.如果需要为一个类实现代理, 那么可以使用 CGLIB 代理. 当一个业务逻辑对象没有实现接口时, 那么Spring AOP 就默认使用 CGLIB 来作为 AOP 代理了. 即如果我们需要为一个方法织入 advice, 但是这个方法不是一个接口所提供的方法, 则此时 Spring AOP 会使用 CGLIB 来实现动态代理. 鉴于此, Spring AOP 建议基于接口编程, 对接口进行 AOP 而不是类.</li></ul><h4 id="彻底理解-aspect-join-point-point-cut-advice"><a href="#彻底理解-aspect-join-point-point-cut-advice" class="headerlink" title="彻底理解 aspect, join point, point cut, advice"></a>彻底理解 aspect, join point, point cut, advice</h4><p>看完了上面的理论部分知识, 我相信还是会有不少朋友感觉到 AOP 的概念还是很模糊, 对 AOP 中的各种概念理解的还不是很透彻. 其实这很正常, 因为 AOP 中的概念是在是太多了, 我当时也是花了老大劲才梳理清楚的.下面我以一个简单的例子来比喻一下 AOP 中 aspect, jointpoint, pointcut 与 advice 之间的关系.</p><p>让我们来假设一下, 从前有一个叫爪哇的小县城, 在一个月黑风高的晚上, 这个县城中发生了命案. 作案的凶手十分狡猾, 现场没有留下什么有价值的线索. 不过万幸的是, 刚从隔壁回来的老王恰好在这时候无意中发现了凶手行凶的过程, 但是由于天色已晚, 加上凶手蒙着面, 老王并没有看清凶手的面目, 只知道凶手是个男性, 身高约七尺五寸. 爪哇县的县令根据老王的描述, 对守门的士兵下命令说: 凡是发现有身高七尺五寸的男性, 都要抓过来审问. 士兵当然不敢违背县令的命令, 只好把进出城的所有符合条件的人都抓了起来.</p><p>来让我们看一下上面的一个小故事和 AOP 到底有什么对应关系.首先我们知道, 在 Spring AOP 中 join point 指代的是所有方法的执行点, 而 point cut 是一个描述信息, 它修饰的是 join point, 通过 point cut, 我们就可以确定哪些 join point 可以被织入 Advice. 对应到我们在上面举的例子, 我们可以做一个简单的类比, join point 就相当于 爪哇的小县城里的百姓 , point cut 就相当于 老王所做的指控, 即凶手是个男性, 身高约七尺五寸 , 而 advice 则是施加在符合老王所描述的嫌疑人的动作: 抓过来审问 .为什么可以这样类比呢?</p><p>join point –&gt; 爪哇的小县城里的百姓: 因为根据定义, join point 是所有可能被织入 advice 的候选的点, 在 Spring AOP中, 则可以认为所有方法执行点都是 join point. 而在我们上面的例子中, 命案发生在小县城中, 按理说在此县城中的所有人都有可能是嫌疑人.<br>point cut –&gt; 男性, 身高约七尺五寸: 我们知道, 所有的方法(joint point) 都可以织入 advice, 但是我们并不希望在所有方法上都织入 advice, 而 pointcut 的作用就是提供一组规则来匹配joinpoint, 给满足规则的 joinpoint 添加 advice. 同理, 对于县令来说, 他再昏庸, 也知道不能把县城中的所有百姓都抓起来审问, 而是根据凶手是个男性, 身高约七尺五寸, 把符合条件的人抓起来. 在这里 凶手是个男性, 身高约七尺五寸 就是一个修饰谓语, 它限定了凶手的范围, 满足此修饰规则的百姓都是嫌疑人, 都需要抓起来审问.<br>advice –&gt; 抓过来审问, advice 是一个动作, 即一段 Java 代码, 这段 Java 代码是作用于 point cut 所限定的那些 join point 上的. 同理, 对比到我们的例子中, 抓过来审问 这个动作就是对作用于那些满足 男性, 身高约七尺五寸 的爪哇的小县城里的百姓.<br>aspect: aspect 是 point cut 与 advice 的组合, 因此在这里我们就可以类比: “根据老王的线索, 凡是发现有身高七尺五寸的男性, 都要抓过来审问” 这一整个动作可以被认为是一个 aspect.<br>或则我们也可以从语法的角度来简单类比一下. 我们在学英语时, 经常会接触什么 定语, 被动句 之类的概念, 那么可以做一个不严谨的类比, 即 joinpoint 可以认为是一个 宾语, 而 pointcut 则可以类比为修饰 joinpoint 的定语, 那么整个 aspect 就可以描述为: 满足 pointcut 规则的 joinpoint 会被添加相应的 advice 操作.</p><blockquote><p>@AspectJ 支持<br>@AspectJ 是一种使用 Java 注解来实现 AOP 的编码风格.@AspectJ 风格的 AOP 是 AspectJ Project 在 AspectJ 5 中引入的, 并且 Spring 也支持@AspectJ 的 AOP 风格.</p></blockquote><ul><li>使能 @AspectJ 支持<br>@AspectJ 可以以 XML 的方式或以注解的方式来使能, 并且不论以哪种方式使能@ASpectJ, 我们都必须保证 aspectjweaver.jar 在 classpath 中.</li><li>使用 Java Configuration 方式使能@AspectJ</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Configuration</span><br><span class="line">@EnableAspectJAutoProxy</span><br><span class="line">publicclass AppConfig &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>定义 aspect(切面)<br>当使用注解 @Aspect 标注一个 Bean 后, 那么 Spring 框架会自动收集这些 Bean, 并添加到 Spring AOP 中, 例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">publicclass MyTest &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意, 仅仅使用@Aspect 注解, 并不能将一个 Java 对象转换为 Bean, 因此我们还需要使用类似 @Component 之类的注解.注意, 如果一个 类被@Aspect 标注, 则这个类就不能是其他 aspect 的 advised object 了, 因为使用 @Aspect 后, 这个类就会被排除在 auto-proxying 机制之外.</p></blockquote><ul><li>声明 pointcut<br>一个 pointcut 的声明由两部分组成:</li></ul><p>一个方法签名, 包括方法名和相关参数<br>一个 pointcut 表达式, 用来指定哪些方法执行是我们感兴趣的(即因此可以织入 advice).<br>在@AspectJ 风格的 AOP 中, 我们使用一个方法来描述 pointcut, 即:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@Pointcut(&quot;execution(* com.xys.service.UserService.*(..))&quot;) &#x2F;&#x2F; 切点表达式</span><br><span class="line">private void dataAccessOperation() &#123;&#125; &#x2F;&#x2F; 切点前面</span><br></pre></td></tr></table></figure><p>这个方法必须无返回值.这个方法本身就是 pointcut signature, pointcut 表达式使用@Pointcut 注解指定.上面我们简单地定义了一个 pointcut, 这个 pointcut 所描述的是: 匹配所有在包 com.xys.service.UserService 下的所有方法的执行.</p><p>切点标志符(designator)<br>AspectJ5 的切点表达式由标志符(designator)和操作参数组成. 如 “execution( greetTo(..))” 的切点表达式, execution 就是 标志符, 而圆括号里的 greetTo(..) 就是操作参数</p><p>execution<br>匹配 join point 的执行, 例如 “execution(* hello(..))” 表示匹配所有目标类中的 hello() 方法. 这个是最基本的 pointcut 标志符.</p><p>within<br>匹配特定包下的所有 join point, 例如 within(com.xys.<em>) 表示 com.xys 包中的所有连接点, 即包中的所有类的所有方法. 而 within(com.xys.service.</em>Service) 表示在 com.xys.service 包中所有以 Service 结尾的类的所有的连接点.</p><p>this 与 target<br>this 的作用是匹配一个 bean, 这个 bean(Spring AOP proxy) 是一个给定类型的实例(instance of). 而 target 匹配的是一个目标对象(target object, 即需要织入 advice 的原始的类), 此对象是一个给定类型的实例(instance of).</p><p>bean<br>匹配 bean 名字为指定值的 bean 下的所有方法, 例如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bean(*Service) &#x2F;&#x2F; 匹配名字后缀为 Service 的 bean 下的所有方法</span><br><span class="line">bean(myService) &#x2F;&#x2F; 匹配名字为 myService 的 bean 下的所有方法</span><br></pre></td></tr></table></figure><ul><li>args<br>匹配参数满足要求的的方法.例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Pointcut(&quot;within(com.xys.demo2.*)&quot;)</span><br><span class="line">public void pointcut2() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Before(value &#x3D; &quot;pointcut2()  &amp;&amp;  args(name)&quot;)</span><br><span class="line">public void doSomething(String name) &#123;</span><br><span class="line">    logger.info(&quot;---page: &#123;&#125;---&quot;, name);</span><br><span class="line">&#125;</span><br><span class="line">@Service</span><br><span class="line">publicclass NormalService &#123;</span><br><span class="line">    private Logger logger &#x3D; LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    public void someMethod() &#123;</span><br><span class="line">        logger.info(&quot;---NormalService: someMethod invoked---&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public String test(String name) &#123;</span><br><span class="line">        logger.info(&quot;---NormalService: test invoked---&quot;);</span><br><span class="line">        return&quot;服务一切正常&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 NormalService.test 执行时, 则 advice doSomething 就会执行, test 方法的参数 name 就会传递到 doSomething 中.<br>常用例子:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配只有一个参数 name 的方法</span><br><span class="line">@Before(value &#x3D; &quot;aspectMethod()  &amp;&amp;  args(name)&quot;)</span><br><span class="line">public void doSomething(String name) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配第一个参数为 name 的方法</span><br><span class="line">@Before(value &#x3D; &quot;aspectMethod()  &amp;&amp;  args(name, ..)&quot;)</span><br><span class="line">public void doSomething(String name) &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配第二个参数为 name 的方法</span><br><span class="line">Before(value &#x3D; &quot;aspectMethod()  &amp;&amp;  args(*, name, ..)&quot;)</span><br><span class="line">public void doSomething(String name) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>@annotation<br>匹配由指定注解所标注的方法, 例如:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@Pointcut(&quot;@annotation(com.xys.demo1.AuthChecker)&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>则匹配由注解 AuthChecker 所标注的方法.</p><ul><li>常见的切点表达式<br>匹配方法签名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配指定包中的所有的方法</span><br><span class="line">execution(* com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配当前包中的指定类的所有方法</span><br><span class="line">execution(* UserService.*(..))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配指定包中的所有 public 方法</span><br><span class="line">execution(public * com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配指定包中的所有 public 方法, 并且返回值是 int 类型的方法</span><br><span class="line">execution(publicint com.xys.service.*(..))</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配指定包中的所有 public 方法, 并且第一个参数是 String, 返回值是 int 类型的方法</span><br><span class="line">execution(publicint com.xys.service.*(String name, ..))</span><br></pre></td></tr></table></figure><ul><li>匹配类型签名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配指定包中的所有的方法, 但不包括子包</span><br><span class="line">within(com.xys.service.*)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配指定包中的所有的方法, 包括子包</span><br><span class="line">within(com.xys.service..*)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配当前包中的指定类中的方法</span><br><span class="line">within(UserService)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配一个接口的所有实现类中的实现的方法</span><br><span class="line">within(UserDao+)</span><br></pre></td></tr></table></figure><ul><li>匹配 Bean 名字</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配以指定名字结尾的 Bean 中的所有方法</span><br><span class="line">bean(*Service)</span><br></pre></td></tr></table></figure><ul><li>切点表达式组合</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 匹配以 Service 或 ServiceImpl 结尾的 bean</span><br><span class="line">bean(*Service || *ServiceImpl)</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 匹配名字以 Service 结尾, 并且在包 com.xys.service 中的 bean</span><br><span class="line">bean(*Service) &amp;&amp; within(com.xys.service.*)</span><br></pre></td></tr></table></figure><ul><li>声明 advice<br>advice 是和一个 pointcut 表达式关联在一起的, 并且会在匹配的 join point 的方法执行的前/后/周围 运行. pointcut 表达式可以是简单的一个 pointcut 名字的引用, 或者是完整的 pointcut 表达式.下面我们以几个简单的 advice 为例子, 来看一下一个 advice 是如何声明的.</li></ul><p>Before advice</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * @author xiongyongshun</span><br><span class="line"> * @version 1.0</span><br><span class="line"> * @created 16&#x2F;9&#x2F;9 13:13</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">publicclass BeforeAspectTest &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义一个 Pointcut, 使用 切点表达式函数 来描述对哪些 Join point 使用 advise.</span><br><span class="line">    @Pointcut(&quot;execution(* com.xys.service.UserService.*(..))&quot;)</span><br><span class="line">    public void dataAccessOperation() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">publicclass AdviseDefine &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义 advise</span><br><span class="line">    @Before(&quot;com.xys.aspect.PointcutDefine.dataAccessOperation()&quot;)</span><br><span class="line">    public void doBeforeAccessCheck(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.out.println(&quot;*****Before advise, method: &quot; + joinPoint.getSignature().toShortString() + &quot; *****&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里, @Before 引用了一个 pointcut, 即 “com.xys.aspect.PointcutDefine.dataAccessOperation()” 是一个 pointcut 的名字.如果我们在 advice 在内置 pointcut, 则可以:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">publicclass AdviseDefine &#123;</span><br><span class="line">    &#x2F;&#x2F; 将 pointcut 和 advice 同时定义</span><br><span class="line">    @Before(&quot;within(com.xys.service..*)&quot;)</span><br><span class="line">    public void doAccessCheck(JoinPoint joinPoint) &#123;</span><br><span class="line">        System.out.println(&quot;*****doAccessCheck, Before advise, method: &quot; + joinPoint.getSignature().toShortString() + &quot; *****&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>around advice<br>around advice 比较特别, 它可以在一个方法的之前之前和之后添加不同的操作, 并且甚至可以决定何时, 如何, 是否调用匹配到的方法.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">@Aspect</span><br><span class="line">publicclass AdviseDefine &#123;</span><br><span class="line">    &#x2F;&#x2F; 定义 advise</span><br><span class="line">    @Around(&quot;com.xys.aspect.PointcutDefine.dataAccessOperation()&quot;)</span><br><span class="line">    public Object doAroundAccessCheck(ProceedingJoinPoint pjp) throws Throwable &#123;</span><br><span class="line">        StopWatch stopWatch &#x3D; new StopWatch();</span><br><span class="line">        stopWatch.start();</span><br><span class="line">        &#x2F;&#x2F; 开始</span><br><span class="line">        Object retVal &#x3D; pjp.proceed();</span><br><span class="line">        stopWatch.stop();</span><br><span class="line">        &#x2F;&#x2F; 结束</span><br><span class="line">        System.out.println(&quot;invoke method: &quot; + pjp.getSignature().getName() + &quot;, elapsed time: &quot; + stopWatch.getTotalTimeMillis());</span><br><span class="line">        return retVal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>around advice 和前面的 before advice 差不多, 只是我们把注解 @Before 改为了 @Around 了.</p>]]></content>
      
      
      <categories>
          
          <category> Java_enhance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lc经典题目分类总结</title>
      <link href="/2020/03/07/lc%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/07/lc%E7%BB%8F%E5%85%B8%E9%A2%98%E7%9B%AE%E5%88%86%E7%B1%BB%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lc&amp;nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lc题目总结</title>
      <link href="/2020/03/01/lt%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/01/lt%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>easy205. 同构字符串</p></blockquote><ul><li>使用嵌套数组同样可以实现map映射<blockquote><p>mid179. 最大数</p></blockquote></li><li>fast<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public String largestNumber(int[] nums) &#123;</span><br><span class="line">        String[] numstr &#x3D; new String[nums.length];</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            numstr[i] &#x3D; String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(numstr,0,nums.length-1);</span><br><span class="line">        &#x2F;&#x2F; System.out.println(Arrays.toString(numstr));</span><br><span class="line">        StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">        if(numstr[0].charAt(0)&#x3D;&#x3D;&#39;0&#39;)&#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        for(String num:numstr)&#123;</span><br><span class="line">            sb.append(num);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    int compare(String a,String b)&#123;</span><br><span class="line">        int l1 &#x3D; a.length();</span><br><span class="line">        int l2 &#x3D; b.length();</span><br><span class="line">        int l &#x3D; l1+l2;</span><br><span class="line">        int i&#x3D;0;</span><br><span class="line">        for(;i&lt;l;i++)&#123;</span><br><span class="line">            char ac &#x3D; a.charAt(i%l1);</span><br><span class="line">            char bc &#x3D; b.charAt(i%l2);</span><br><span class="line">            if(ac&#x3D;&#x3D;bc)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return ac-bc;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">        &#x2F;&#x2F; System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b+&quot;,cp:&quot;+cp);</span><br><span class="line">        &#x2F;&#x2F; return cp;</span><br><span class="line">    &#125;</span><br><span class="line">    void quickSort(String[] nums,int start,int end)&#123;</span><br><span class="line">        if(start&gt;&#x3D;end)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; getIndex(nums,start,end);</span><br><span class="line">        quickSort(nums,start,index-1);</span><br><span class="line">        quickSort(nums,index+1,end);</span><br><span class="line">    &#125;</span><br><span class="line">    int getIndex(String[]nums,int low,int high)&#123;</span><br><span class="line">        String tmp &#x3D; nums[low];</span><br><span class="line">        while(low&lt;high)&#123;</span><br><span class="line">            while(low&lt;high&amp;&amp;compare(nums[high],tmp)&lt;&#x3D;0)&#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[low] &#x3D; nums[high];</span><br><span class="line">            while(low&lt;high&amp;&amp;compare(nums[low],tmp)&gt;&#x3D;0)&#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[high] &#x3D; nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[low] &#x3D; tmp;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li>mine<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">public String largestNumber(int[] nums) &#123;</span><br><span class="line">    String[] ans &#x3D; new String[nums.length];</span><br><span class="line">    for (int i &#x3D; 0; i &lt; nums.length; i++) ans[i] &#x3D; String.valueOf(nums[i]);</span><br><span class="line">    Arrays.sort(ans, new NumComparator());</span><br><span class="line">    StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">    if (ans[0].charAt(0) &#x3D;&#x3D; &#39;0&#39;) &#123;</span><br><span class="line">        return &quot;0&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    for (String num : ans) &#123;</span><br><span class="line">        sb.append(num);</span><br><span class="line">    &#125;</span><br><span class="line">    return sb.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public class NumComparator implements Comparator&lt;String&gt; &#123;</span><br><span class="line">    @Override</span><br><span class="line">    public int compare(String o1, String o2) &#123;</span><br><span class="line">        int l1 &#x3D; o1.length();</span><br><span class="line">        int l2 &#x3D; o2.length();</span><br><span class="line">        int l &#x3D; l1 + l2;</span><br><span class="line">        int i &#x3D; 0;</span><br><span class="line">        for (; i &lt; l; i++) &#123;</span><br><span class="line">            char ac &#x3D; o1.charAt(i % l1);</span><br><span class="line">            char bc &#x3D; o2.charAt(i % l2);</span><br><span class="line">            if (ac &#x3D;&#x3D; bc) &#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return  bc - ac;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>lambda<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String largestNumber(int[] nums) &#123;</span><br><span class="line">    String result &#x3D; IntStream.of(nums).mapToObj(String::valueOf).sorted(((o1, o2) -&gt; (o2 + o1).compareTo(o1 + o2))).collect(Collectors.joining());</span><br><span class="line">    return result.startsWith(&quot;0&quot;) ? &quot;0&quot; : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>面试题57 - II. 和为s的连续正数序列-滑动窗口</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lc&amp;nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaBooks</title>
      <link href="/2020/02/29/JavaBooks/"/>
      <url>/2020/02/29/JavaBooks/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的语法收录</title>
      <link href="/2020/02/29/Hexo%E7%9A%84%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95/"/>
      <url>/2020/02/29/Hexo%E7%9A%84%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java加强编译运行</title>
      <link href="/2020/02/29/Java%E5%8A%A0%E5%BC%BA%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/"/>
      <url>/2020/02/29/Java%E5%8A%A0%E5%BC%BA%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="grammer-skills"><a href="#grammer-skills" class="headerlink" title="grammer skills"></a>grammer skills</h3><ul><li>变长二维数组转定长<blockquote><p>int[][] res = new ArrayList&lt;&gt;().toArray(new int[res.size()][]);</p></blockquote></li></ul><h3 id="compile-amp-runtime"><a href="#compile-amp-runtime" class="headerlink" title="compile&amp;runtime"></a>compile&amp;runtime</h3><ul><li>不要用有参构造函数</li><li>使用移位操作代替乘除法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&#x2F;4 &#x3D;&#x3D; a &gt;&gt; 2</span><br><span class="line">a&#x2F;8 &#x3D;&#x3D; a &gt;&gt; 3</span><br><span class="line">a×4 &#x3D;&#x3D; a &lt;&lt; 2</span><br><span class="line">a×8 &#x3D;&#x3D; a &lt;&lt; 3</span><br></pre></td></tr></table></figure></li><li>引用类型转换为字符串最好使用toString()，String.valueof()其次，不要使用new String()</li><li>类上申明final</li><li>for使用如下方式 </li><li>复制数组使用System.arraycopy()</li><li>对象应该多重用</li><li>list, map, set, StringBuilder应设定初始值</li><li>顺序插入和随机访问使用arraylist，删除和随机插入使用linklist，无序使用set</li><li>对象比较使用Objects.equals</li><li>使用栈和队列时，使用linklist(插入，删除)或arraydeque(随机访问)，接口为deque</li><li>Collections.reverseOrder()(比较器)可以反转有序集合(list，queue等)</li><li>遍历map的几种方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果只是获取key，或者value，推荐使用keySet或者values方式</span><br><span class="line">&#x2F;&#x2F; KeySet 获取key </span><br><span class="line">public void testKeySet() &#123; </span><br><span class="line">    for (Integer key : map.keySet()) &#123; </span><br><span class="line">        System.out.println(key); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; &#x2F;&#x2F; values 获取value </span><br><span class="line">public void testValues() &#123; </span><br><span class="line">    for (Integer value : map.values()) &#123; </span><br><span class="line">        System.out.println(value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果同时需要key和value推荐使用entrySet</span><br><span class="line">public void testEntry() &#123; </span><br><span class="line">    for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123; </span><br><span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">public void testLambda() &#123; </span><br><span class="line">    map.forEach((key, value) -&gt; &#123; System.out.println(key + &quot;:&quot; + value); &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果需要在遍历过程中删除元素推荐使用Iterator</span><br><span class="line">public void testIterator() &#123; </span><br><span class="line">    Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it &#x3D; map.entrySet().iterator();  </span><br><span class="line">    while (it.hasNext()) &#123; </span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; entry &#x3D; it.next();   </span><br><span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());   </span><br><span class="line">        &#x2F;&#x2F;it.remove(); 删除元素 </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要在遍历过程中增加元素，可以新建一个临时map存放新增的元素，等遍历完毕，再把临时map放到原来的map中</p></blockquote></li><li>加速读取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static class FastIO &#123;</span><br><span class="line">    BufferedReader reader;</span><br><span class="line">    StringTokenizer tokenizer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void init(InputStream inputStream) &#123;</span><br><span class="line">        reader &#x3D; new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">        tokenizer &#x3D; new StringTokenizer(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入一个字符串</span><br><span class="line">    String next() &#123;</span><br><span class="line">        while (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                tokenizer &#x3D; new StringTokenizer(reader.readLine());</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tokenizer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入一整行</span><br><span class="line">    String nextLine() &#123;</span><br><span class="line">        while (!tokenizer.hasMoreElements()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                tokenizer &#x3D; new StringTokenizer(reader.readLine());</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tokenizer.nextToken(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入int类型数据</span><br><span class="line">    int nextInt() &#123;</span><br><span class="line">        return Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入double类型数据</span><br><span class="line">    double nextDouble() &#123;</span><br><span class="line">        return Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Character.getNumericValue(char ch)<br>获取Unicode对应int，即char-&gt;int</li><li>HashSet的add方法可以判断是否重复放元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0,length &#x3D; list.length; )</span><br></pre></td></tr></table></figure></li><li>获取整数位数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num &#x3D; num &gt; 0 ? num : -num;       </span><br><span class="line">if (num&#x3D;&#x3D;0) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">return (int) Math.log10(num)+1;</span><br></pre></td></tr></table></figure><h3 id="reduce-mem"><a href="#reduce-mem" class="headerlink" title="reduce mem"></a>reduce mem</h3></li><li>批量创建对象是使用clone方法</li><li>尽量使用局部变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java_enhance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lc&amp;nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加Gitment评论系统&amp;相关问题解决</title>
      <link href="/2020/02/28/Hexo%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/02/28/Hexo%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册OAuth Application</a></h3><p><img src="https://upload-images.jianshu.io/upload_images/1319879-7cda76c0786cdf16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注意:<br>1.callback URL需要填自己的博客地址 eg:<a href="https://d0ma4t2.github.io/" target="_blank" rel="noopener">https://d0ma4t2.github.io/</a><br>2.然后你会得到一个Client ID 和一个 Client secret，这个将被用于之后的用户登录</p></blockquote><h3 id="在yelee主题中引入Gitment"><a href="#在yelee主题中引入Gitment" class="headerlink" title="在yelee主题中引入Gitment"></a>在yelee主题中引入Gitment</h3><p>在themes/yelee/layout/_partial/post文件夹下创建git.ejs文件，并写入下边代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;git&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;extra_css&#x2F;gitment.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;js&#x2F;gitment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment &#x3D; new Gitment(&#123;</span><br><span class="line">  id: &quot;&lt;%&#x3D; page.title %&gt;&quot;,</span><br><span class="line">  owner: &quot;stven0king&quot;,&#x2F;&#x2F;github用户名</span><br><span class="line">  repo: &quot;stven0king.github.io&quot;,&#x2F;&#x2F;用户存储评论的github项目名称</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    id: &quot;&lt;%&#x3D; page.title %&gt;&quot;,</span><br><span class="line">    client_id: &quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;,&#x2F;&#x2F;注册OAuth Application时生产的ClinetID</span><br><span class="line">    client_secret:&quot;xxxxxxxxxxxxxxxxxxxxx&quot;,&#x2F;&#x2F;注册OAuth Application时生成的Client Secret</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&#39;git&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure><p>接着在themes/yelee/layout/_partial/article.ejs文件中找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(&#39;comments&#x2F;duoshuo&#39;, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;youyan&#39;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;disqus&#39;, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;disqus&#39;, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在这个节点下添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index)&#123; %&gt;</span><br><span class="line">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(&#39;post&#x2F;git&#39;) %&gt;</span><br><span class="line">  &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;git&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>以上所有操作完成后，hexo clean、hexo g -d，然后文章底部就可以展现评论视图了</p><blockquote><p>FAQ<br>1.最开始我们看到的是：Error:Comments Not Initialized，登录你的账号即可<br>2.点击初始化评论<br>3.配置好后，有时候出现object ProgressEvent，可能是网络问题关掉网页重新打开即可<br>4.关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法<br><a href="https://www.cnblogs.com/zmj97/p/10421872.html" target="_blank" rel="noopener">https://www.cnblogs.com/zmj97/p/10421872.html</a></p></blockquote><blockquote><p>本文参考：<br><a href="https://www.dazhuanlan.com/2020/01/20/5e2518040b423/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/01/20/5e2518040b423/</a><br><a href="https://blog.csdn.net/xiaosongshine/article/details/100614850?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/xiaosongshine/article/details/100614850?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br><a href="https://blog.csdn.net/YEN_CSDN/article/details/80142392?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/YEN_CSDN/article/details/80142392?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitment </tag>
            
            <tag> FAQ </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
