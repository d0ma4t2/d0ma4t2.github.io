<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>lt题目总结</title>
      <link href="/2020/03/01/lt%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/"/>
      <url>/2020/03/01/lt%E9%A2%98%E7%9B%AE%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>easy205. 同构字符串</p></blockquote><ul><li><p>使用嵌套数组同样可以实现map映射</p><blockquote><p>mid179. 最大数</p></blockquote></li><li><p>fast</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">public String largestNumber(int[] nums) &#123;</span><br><span class="line">        String[] numstr &#x3D; new String[nums.length];</span><br><span class="line">        for(int i&#x3D;0;i&lt;nums.length;i++)&#123;</span><br><span class="line">            numstr[i] &#x3D; String.valueOf(nums[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        quickSort(numstr,0,nums.length-1);</span><br><span class="line">        &#x2F;&#x2F; System.out.println(Arrays.toString(numstr));</span><br><span class="line">        StringBuffer sb &#x3D; new StringBuffer();</span><br><span class="line">        if(numstr[0].charAt(0)&#x3D;&#x3D;&#39;0&#39;)&#123;</span><br><span class="line">            return &quot;0&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">        for(String num:numstr)&#123;</span><br><span class="line">            sb.append(num);</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    int compare(String a,String b)&#123;</span><br><span class="line">        int l1 &#x3D; a.length();</span><br><span class="line">        int l2 &#x3D; b.length();</span><br><span class="line">        int l &#x3D; l1+l2;</span><br><span class="line">        int i&#x3D;0;</span><br><span class="line">        for(;i&lt;l;i++)&#123;</span><br><span class="line">            char ac &#x3D; a.charAt(i%l1);</span><br><span class="line">            char bc &#x3D; b.charAt(i%l2);</span><br><span class="line">            if(ac&#x3D;&#x3D;bc)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;</span><br><span class="line">            return ac-bc;</span><br><span class="line">        &#125;</span><br><span class="line">        return 0;</span><br><span class="line">        &#x2F;&#x2F; System.out.println(&quot;a:&quot;+a+&quot;,b:&quot;+b+&quot;,cp:&quot;+cp);</span><br><span class="line">        &#x2F;&#x2F; return cp;</span><br><span class="line">    &#125;</span><br><span class="line">    void quickSort(String[] nums,int start,int end)&#123;</span><br><span class="line">        if(start&gt;&#x3D;end)&#123;</span><br><span class="line">            return;</span><br><span class="line">        &#125;</span><br><span class="line">        int index &#x3D; getIndex(nums,start,end);</span><br><span class="line">        quickSort(nums,start,index-1);</span><br><span class="line">        quickSort(nums,index+1,end);</span><br><span class="line">    &#125;</span><br><span class="line">    int getIndex(String[]nums,int low,int high)&#123;</span><br><span class="line">        String tmp &#x3D; nums[low];</span><br><span class="line">        while(low&lt;high)&#123;</span><br><span class="line">            while(low&lt;high&amp;&amp;compare(nums[high],tmp)&lt;&#x3D;0)&#123;</span><br><span class="line">                high--;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[low] &#x3D; nums[high];</span><br><span class="line">            while(low&lt;high&amp;&amp;compare(nums[low],tmp)&gt;&#x3D;0)&#123;</span><br><span class="line">                low++;</span><br><span class="line">            &#125;</span><br><span class="line">            nums[high] &#x3D; nums[low];</span><br><span class="line">        &#125;</span><br><span class="line">        nums[low] &#x3D; tmp;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li><li><p>lambda</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">public String largestNumber(int[] nums) &#123;</span><br><span class="line">    String result &#x3D; IntStream.of(nums).mapToObj(String::valueOf).sorted(((o1, o2) -&gt; (o2 + o1).compareTo(o1 + o2))).collect(Collectors.joining());</span><br><span class="line">    return result.startsWith(&quot;0&quot;) ? &quot;0&quot; : result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lt&amp;nc </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaBooks</title>
      <link href="/2020/03/01/JavaBooks/"/>
      <url>/2020/03/01/JavaBooks/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 书籍分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的语法收录</title>
      <link href="/2020/03/01/Hexo%E7%9A%84%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95/"/>
      <url>/2020/03/01/Hexo%E7%9A%84%E8%AF%AD%E6%B3%95%E6%94%B6%E5%BD%95/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo添加Gitment评论系统&amp;相关问题解决</title>
      <link href="/2020/02/29/Hexo%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
      <url>/2020/02/29/Hexo%E6%B7%BB%E5%8A%A0Gitment%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F-%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</url>
      
        <content type="html"><![CDATA[<h3 id="注册OAuth-Application"><a href="#注册OAuth-Application" class="headerlink" title="注册OAuth Application"></a><a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">注册OAuth Application</a></h3><p><img src="https://upload-images.jianshu.io/upload_images/1319879-7cda76c0786cdf16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注意:<br>1.callback URL需要填自己的博客地址 eg:<a href="https://d0ma4t2.github.io/" target="_blank" rel="noopener">https://d0ma4t2.github.io/</a><br>2.然后你会得到一个Client ID 和一个 Client secret，这个将被用于之后的用户登录</p></blockquote><h3 id="在yelee主题中引入Gitment"><a href="#在yelee主题中引入Gitment" class="headerlink" title="在yelee主题中引入Gitment"></a>在yelee主题中引入Gitment</h3><p>在themes/yelee/layout/_partial/post文件夹下创建git.ejs文件，并写入下边代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id&#x3D;&quot;git&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;extra_css&#x2F;gitment.css&quot;&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;billts.site&#x2F;js&#x2F;gitment.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">var gitment &#x3D; new Gitment(&#123;</span><br><span class="line">  id: &quot;&lt;%&#x3D; page.title %&gt;&quot;,</span><br><span class="line">  owner: &quot;stven0king&quot;,&#x2F;&#x2F;github用户名</span><br><span class="line">  repo: &quot;stven0king.github.io&quot;,&#x2F;&#x2F;用户存储评论的github项目名称</span><br><span class="line">  oauth: &#123;</span><br><span class="line">    id: &quot;&lt;%&#x3D; page.title %&gt;&quot;,</span><br><span class="line">    client_id: &quot;xxxxxxxxxxxxxxxxxxxxxxxx&quot;,&#x2F;&#x2F;注册OAuth Application时生产的ClinetID</span><br><span class="line">    client_secret:&quot;xxxxxxxxxxxxxxxxxxxxx&quot;,&#x2F;&#x2F;注册OAuth Application时生成的Client Secret</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">gitment.render(&#39;git&#39;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;!-- Gitment代码结束 --&gt;</span><br></pre></td></tr></table></figure><p>接着在themes/yelee/layout/_partial/article.ejs文件中找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments)&#123; %&gt;</span><br><span class="line">    &lt;% if (theme.duoshuo.on) &#123; %&gt;</span><br><span class="line">      &lt;%- partial(&#39;comments&#x2F;duoshuo&#39;, &#123;</span><br><span class="line">          key: post.path,</span><br><span class="line">          title: post.title,</span><br><span class="line">          url: config.url+url_for(post.path),</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.youyan.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;youyan&#39;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (theme.disqus.on) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;disqus&#39;, &#123;</span><br><span class="line">            shortname: theme.disqus.shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; else if (config.disqus_shortname) &#123; %&gt;</span><br><span class="line">        &lt;%- partial(&#39;comments&#x2F;disqus&#39;, &#123;</span><br><span class="line">            shortname: config.disqus_shortname</span><br><span class="line">          &#125;) %&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>在这个节点下添加：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index)&#123; %&gt;</span><br><span class="line">  &lt;% if (post.comments)&#123; %&gt;</span><br><span class="line">  &lt;%- partial(&#39;post&#x2F;git&#39;) %&gt;</span><br><span class="line">  &lt;% &#125; else &#123; %&gt;</span><br><span class="line">    &lt;div class&#x3D;&quot;git&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><p>以上所有操作完成后，hexo clean、hexo g -d，然后文章底部就可以展现评论视图了</p><blockquote><p>FAQ<br>1.最开始我们看到的是：Error:Comments Not Initialized，登录你的账号即可<br>2.点击初始化评论<br>3.配置好后，有时候出现object ProgressEvent，可能是网络问题关掉网页重新打开即可<br>4.关于hexo博客自定义域名后gitment评论系统登陆出现redirect error返回主页的解决办法<br><a href="https://www.cnblogs.com/zmj97/p/10421872.html" target="_blank" rel="noopener">https://www.cnblogs.com/zmj97/p/10421872.html</a></p></blockquote><blockquote><p>本文参考：<br><a href="https://www.dazhuanlan.com/2020/01/20/5e2518040b423/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2020/01/20/5e2518040b423/</a><br><a href="https://blog.csdn.net/xiaosongshine/article/details/100614850?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/xiaosongshine/article/details/100614850?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a><br><a href="https://blog.csdn.net/YEN_CSDN/article/details/80142392?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task" target="_blank" rel="noopener">https://blog.csdn.net/YEN_CSDN/article/details/80142392?depth_1-utm_source=distribute.pc_relevant.none-task&amp;utm_source=distribute.pc_relevant.none-task</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Gitment </tag>
            
            <tag> FAQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java加强编译运行</title>
      <link href="/2020/02/29/Java%E5%8A%A0%E5%BC%BA%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/"/>
      <url>/2020/02/29/Java%E5%8A%A0%E5%BC%BA%E7%BC%96%E8%AF%91%E8%BF%90%E8%A1%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="加强compile-amp-runtime"><a href="#加强compile-amp-runtime" class="headerlink" title="加强compile&amp;runtime"></a>加强compile&amp;runtime</h3><ul><li>不要用有参构造函数</li><li>使用移位操作代替乘除法<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a&#x2F;4 &#x3D;&#x3D; a &gt;&gt; 2</span><br><span class="line">a&#x2F;8 &#x3D;&#x3D; a &gt;&gt; 3</span><br><span class="line">a×4 &#x3D;&#x3D; a &lt;&lt; 2</span><br><span class="line">a×8 &#x3D;&#x3D; a &lt;&lt; 3</span><br></pre></td></tr></table></figure></li><li>引用类型转换为字符串最好使用toString()，String.valueof()其次，不要使用new String()</li><li>类上申明final</li><li>for使用如下方式 </li><li>复制数组使用System.arraycopy()</li><li>对象应该多重用</li><li>list, map, set, StringBuilder应设定初始值</li><li>顺序插入和随机访问使用arraylist，删除和随机插入使用linklist，无序使用set</li><li>对象比较使用Objects.equals</li><li>使用栈和队列时，使用linklist(插入，删除)或arraydeque(随机访问)，接口为deque</li><li>Collections.reverseOrder()(比较器)可以反转有序集合(list，queue等)</li><li>遍历map的几种方式<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">如果只是获取key，或者value，推荐使用keySet或者values方式</span><br><span class="line">&#x2F;&#x2F; KeySet 获取key </span><br><span class="line">public void testKeySet() &#123; </span><br><span class="line">    for (Integer key : map.keySet()) &#123; </span><br><span class="line">        System.out.println(key); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; &#x2F;&#x2F; values 获取value </span><br><span class="line">public void testValues() &#123; </span><br><span class="line">    for (Integer value : map.values()) &#123; </span><br><span class="line">        System.out.println(value); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果同时需要key和value推荐使用entrySet</span><br><span class="line">public void testEntry() &#123; </span><br><span class="line">    for (Map.Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123; </span><br><span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue()); </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line">public void testLambda() &#123; </span><br><span class="line">    map.forEach((key, value) -&gt; &#123; System.out.println(key + &quot;:&quot; + value); &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果需要在遍历过程中删除元素推荐使用Iterator</span><br><span class="line">public void testIterator() &#123; </span><br><span class="line">    Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; it &#x3D; map.entrySet().iterator();  </span><br><span class="line">    while (it.hasNext()) &#123; </span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; entry &#x3D; it.next();   </span><br><span class="line">        System.out.println(entry.getKey() + &quot;:&quot; + entry.getValue());   </span><br><span class="line">        &#x2F;&#x2F;it.remove(); 删除元素 </span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果需要在遍历过程中增加元素，可以新建一个临时map存放新增的元素，等遍历完毕，再把临时map放到原来的map中</p></blockquote></li><li>加速读取数据<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">public static class FastIO &#123;</span><br><span class="line">    BufferedReader reader;</span><br><span class="line">    StringTokenizer tokenizer;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void init(InputStream inputStream) &#123;</span><br><span class="line">        reader &#x3D; new BufferedReader(new InputStreamReader(inputStream));</span><br><span class="line">        tokenizer &#x3D; new StringTokenizer(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入一个字符串</span><br><span class="line">    String next() &#123;</span><br><span class="line">        while (!tokenizer.hasMoreTokens()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                tokenizer &#x3D; new StringTokenizer(reader.readLine());</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tokenizer.nextToken();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入一整行</span><br><span class="line">    String nextLine() &#123;</span><br><span class="line">        while (!tokenizer.hasMoreElements()) &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                tokenizer &#x3D; new StringTokenizer(reader.readLine());</span><br><span class="line">            &#125; catch (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return tokenizer.nextToken(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入int类型数据</span><br><span class="line">    int nextInt() &#123;</span><br><span class="line">        return Integer.parseInt(next());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#x2F;&#x2F;读入double类型数据</span><br><span class="line">    double nextDouble() &#123;</span><br><span class="line">        return Double.parseDouble(next());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>Character.getNumericValue(char ch)<br>获取Unicode对应int，即char-&gt;int</li><li>HashSet的add方法可以判断是否重复放元素<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for(int i&#x3D;0,length &#x3D; list.length; )</span><br></pre></td></tr></table></figure></li><li>获取整数位数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">num &#x3D; num &gt; 0 ? num : -num;       </span><br><span class="line">if (num&#x3D;&#x3D;0) &#123;</span><br><span class="line">    return 1;</span><br><span class="line">&#125;</span><br><span class="line">return (int) Math.log10(num)+1;</span><br></pre></td></tr></table></figure><h3 id="减少内存开销"><a href="#减少内存开销" class="headerlink" title="减少内存开销"></a>减少内存开销</h3></li><li>批量创建对象是使用clone方法</li><li>尽量使用局部变量</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java_enhance </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> lt&amp;nc </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
